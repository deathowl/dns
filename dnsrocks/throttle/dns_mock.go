/*
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/miekg/dns (interfaces: PacketConnReader)

// Package ratelimit is a generated GoMock package.
package throttle

import (
	net "net"
	reflect "reflect"
	time "time"

	dns "github.com/miekg/dns"
	gomock "go.uber.org/mock/gomock"
)

// MockPacketConnReader is a mock of PacketConnReader interface.
type MockPacketConnReader struct {
	ctrl     *gomock.Controller
	recorder *MockPacketConnReaderMockRecorder
}

// MockPacketConnReaderMockRecorder is the mock recorder for MockPacketConnReader.
type MockPacketConnReaderMockRecorder struct {
	mock *MockPacketConnReader
}

// NewMockPacketConnReader creates a new mock instance.
func NewMockPacketConnReader(ctrl *gomock.Controller) *MockPacketConnReader {
	mock := &MockPacketConnReader{ctrl: ctrl}
	mock.recorder = &MockPacketConnReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPacketConnReader) EXPECT() *MockPacketConnReaderMockRecorder {
	return m.recorder
}

// ReadPacketConn mocks base method.
func (m *MockPacketConnReader) ReadPacketConn(arg0 net.PacketConn, arg1 time.Duration) ([]byte, net.Addr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPacketConn", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(net.Addr)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadPacketConn indicates an expected call of ReadPacketConn.
func (mr *MockPacketConnReaderMockRecorder) ReadPacketConn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPacketConn", reflect.TypeOf((*MockPacketConnReader)(nil).ReadPacketConn), arg0, arg1)
}

// ReadTCP mocks base method.
func (m *MockPacketConnReader) ReadTCP(arg0 net.Conn, arg1 time.Duration) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTCP", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTCP indicates an expected call of ReadTCP.
func (mr *MockPacketConnReaderMockRecorder) ReadTCP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTCP", reflect.TypeOf((*MockPacketConnReader)(nil).ReadTCP), arg0, arg1)
}

// ReadUDP mocks base method.
func (m *MockPacketConnReader) ReadUDP(arg0 *net.UDPConn, arg1 time.Duration) ([]byte, *dns.SessionUDP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUDP", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*dns.SessionUDP)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadUDP indicates an expected call of ReadUDP.
func (mr *MockPacketConnReaderMockRecorder) ReadUDP(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUDP", reflect.TypeOf((*MockPacketConnReader)(nil).ReadUDP), arg0, arg1)
}
